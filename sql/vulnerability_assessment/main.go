package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resources/armresources"
	"github.com/Azure/azure-sdk-for-go/sdk/sql/armsql"
	"github.com/Azure/azure-sdk-for-go/sdk/storage/armstorage"
)

var (
	subscriptionID     string
	location           = "westus"
	resourceGroupName  = "sample-resource-group"
	serverName         = "sample2server"
	storageAccountName = "sample2storage2account"
	containerName      = "blob2container"
)

func main() {
	subscriptionID = os.Getenv("AZURE_SUBSCRIPTION_ID")
	if len(subscriptionID) == 0 {
		log.Fatal("AZURE_SUBSCRIPTION_ID is not set.")
	}

	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatal(err)
	}

	conn := arm.NewDefaultConnection(cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
	})
	ctx := context.Background()

	resourceGroup, err := createResourceGroup(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("resources group:", *resourceGroup.ID)

	storageAccount, err := createStorageAccount(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("storage account:", *storageAccount.ID)

	blobContainer, err := createBlobContainers(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("blob container:", *blobContainer.ID)

	accountKey, err := regenerateStorageAccountKey(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	accessKey := accountKey[0].Value
	log.Println("account Key:", *accessKey)

	server, err := createServer(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("server:", *server.ID)

	serverSecurityAlertPolicy, err := createServerSecurityAlertPolicy(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("server security alert policy:", *serverSecurityAlertPolicy.ID)

	containerPath := "https://" + storageAccountName + ".blob.core.windows.net/" + containerName + "/"
	serverVulnerabilityAssessment, err := createServerVulnerabilityAssessment(ctx, conn, containerPath, *accessKey)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("server vulnerability assessment:", *serverVulnerabilityAssessment.ID)

	//keepResource := os.Getenv("KEEP_RESOURCE")
	//if len(keepResource) == 0 {
	//	_, err := cleanup(ctx, conn)
	//	if err != nil {
	//		log.Fatal(err)
	//	}
	//	log.Println("cleaned up successfully.")
	//}
}

func createStorageAccount(ctx context.Context, conn *arm.Connection) (*armstorage.StorageAccount, error) {
	storageAccountClient := armstorage.NewStorageAccountsClient(conn, subscriptionID)

	pollerResp, err := storageAccountClient.BeginCreate(
		ctx,
		resourceGroupName,
		storageAccountName,
		armstorage.StorageAccountCreateParameters{
			Kind: armstorage.KindStorageV2.ToPtr(),
			SKU: &armstorage.SKU{
				Name: armstorage.SKUNameStandardLRS.ToPtr(),
			},
			Location: to.StringPtr(location),
			Properties: &armstorage.StorageAccountPropertiesCreateParameters{
				AccessTier: armstorage.AccessTierCool.ToPtr(),
				Encryption: &armstorage.Encryption{
					Services: &armstorage.EncryptionServices{
						File: &armstorage.EncryptionService{
							KeyType: armstorage.KeyTypeAccount.ToPtr(),
							Enabled: to.BoolPtr(true),
						},
						Blob: &armstorage.EncryptionService{
							KeyType: armstorage.KeyTypeAccount.ToPtr(),
							Enabled: to.BoolPtr(true),
						},
					},
					KeySource: armstorage.KeySourceMicrosoftStorage.ToPtr(),
				},
			},
		}, nil)
	if err != nil {
		return nil, err
	}
	resp, err := pollerResp.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}
	return &resp.StorageAccount, nil
}

func createBlobContainers(ctx context.Context, conn *arm.Connection) (*armstorage.BlobContainer, error) {
	blobContainerClient := armstorage.NewBlobContainersClient(conn, subscriptionID)

	resp, err := blobContainerClient.Create(
		ctx,
		resourceGroupName,
		storageAccountName,
		containerName,
		armstorage.BlobContainer{
			ContainerProperties: &armstorage.ContainerProperties{},
		},
		nil,
	)
	if err != nil {
		return nil, err
	}

	return &resp.BlobContainer, nil
}

func regenerateStorageAccountKey(ctx context.Context, conn *arm.Connection) ([]*armstorage.StorageAccountKey, error) {
	storageAccountClient := armstorage.NewStorageAccountsClient(conn, subscriptionID)

	resp, err := storageAccountClient.RegenerateKey(
		ctx,
		resourceGroupName,
		storageAccountName,
		armstorage.StorageAccountRegenerateKeyParameters{
			KeyName: to.StringPtr("key2"),
		},
		nil,
	)
	if err != nil {
		return nil, err
	}
	return resp.Keys, nil
}

func createServer(ctx context.Context, conn *arm.Connection) (*armsql.Server, error) {
	serversClient := armsql.NewServersClient(conn, subscriptionID)

	pollerResp, err := serversClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		serverName,
		armsql.Server{
			TrackedResource: armsql.TrackedResource{
				Location: to.StringPtr(location),
			},
			Properties: &armsql.ServerProperties{
				AdministratorLogin:         to.StringPtr("dummylogin"),
				AdministratorLoginPassword: to.StringPtr("QWE123!@#"),
			},
		},
		nil,
	)
	if err != nil {
		return nil, err
	}
	resp, err := pollerResp.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}
	return &resp.Server, nil
}

func createServerSecurityAlertPolicy(ctx context.Context, conn *arm.Connection) (*armsql.ServerSecurityAlertPolicy, error) {
	serverSecurityAlertPoliciesClient := armsql.NewServerSecurityAlertPoliciesClient(conn, subscriptionID)

	pollerResp, err := serverSecurityAlertPoliciesClient.BeginCreateOrUpdate(
		ctx,
		resourceGroupName,
		serverName,
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ServerSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				State:              armsql.SecurityAlertsPolicyStateEnabled.ToPtr(),
				DisabledAlerts:     []*string{},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses:     []*string{},
			},
		},
		nil,
	)
	if err != nil {
		return nil, err
	}
	resp, err := pollerResp.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}
	return &resp.ServerSecurityAlertPolicy, nil
}

func createServerVulnerabilityAssessment(ctx context.Context, conn *arm.Connection, containerPath, accessKey string) (*armsql.ServerVulnerabilityAssessment, error) {
	serverVulnerabilityAssessmentsClient := armsql.NewServerVulnerabilityAssessmentsClient(conn, subscriptionID)

	resp, err := serverVulnerabilityAssessmentsClient.CreateOrUpdate(
		ctx,
		resourceGroupName,
		serverName,
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ServerVulnerabilityAssessment{
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				StorageContainerPath:    to.StringPtr(containerPath),
				StorageAccountAccessKey: to.StringPtr(accessKey),
			},
		},
		nil,
	)
	if err != nil {
		return nil, err
	}
	return &resp.ServerVulnerabilityAssessment, nil
}

func createResourceGroup(ctx context.Context, conn *arm.Connection) (*armresources.ResourceGroup, error) {
	resourceGroupClient := armresources.NewResourceGroupsClient(conn, subscriptionID)

	resourceGroupResp, err := resourceGroupClient.CreateOrUpdate(
		ctx,
		resourceGroupName,
		armresources.ResourceGroup{
			Location: to.StringPtr(location),
		},
		nil)
	if err != nil {
		return nil, err
	}
	return &resourceGroupResp.ResourceGroup, nil
}

func cleanup(ctx context.Context, conn *arm.Connection) (*http.Response, error) {
	resourceGroupClient := armresources.NewResourceGroupsClient(conn, subscriptionID)

	pollerResp, err := resourceGroupClient.BeginDelete(ctx, resourceGroupName, nil)
	if err != nil {
		return nil, err
	}

	resp, err := pollerResp.PollUntilDone(ctx, 10*time.Second)
	if err != nil {
		return nil, err
	}
	return resp.RawResponse, nil
}
